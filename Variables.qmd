---
title: "Variables"
format: html
editor: visual
---

# Import Data

```{r import data}
duodata <- read_csv("data_flatformat.csv")
```

# Data Cleaning

```{r remove-mis-remaining}
duodata <- duodata |> 
  dplyr::select(-prompt) |> 
  na.omit()
```

```{r clean-data}
#Removing instances with logging issues (time < 1) as noted in the documentation and time > 3 hours for reasonability
duodata <- duodata |> 
  filter(time > 0) |> 
  filter(time < 10800)
```

```{r variable-creation}
#AVERAGES

#Averge Accuracy, Session Time, and Days for each User for their entire time 
duodata <- duodata |> 
  group_by(user) |> 
  mutate(avg_total_accuracy = mean(label), 
         avg_session_time = mean(time), 
         avg_days = mean(days)) |> 
  ungroup()
  #dplyr::select(user, session_id, exercise_id, contains('avg')) 

#Averge Number of Exercises per Session (get and remove Number of Exercises by Session_id)
duodata <- duodata |> 
  group_by(session_id) |> 
  mutate(num_exercises_this_session = n_distinct(exercise_index)) |> 
  ungroup() |> 
  group_by(user) |>
  mutate(avg_exercises_per_session = mean(num_exercises_this_session)) |>
  ungroup() |> 
  dplyr::select(-num_exercises_this_session)
  #dplyr::select(user, session_id, num_session_exercises, avg_exer_per_session) 

#Averge Number of Sessions per Day (get and remove Number of Sessions By Day) 
duodata <- duodata |> 
  mutate(days_count = floor(days)) |> 
  group_by(user, days_count) |> 
  mutate(num_sessions_user_in_day = n_distinct(session_id)) |> 
  ungroup() |> 
  group_by(user) |> 
  mutate(avg_num_sessions_in_day = mean(num_sessions_user_in_day)) |> 
  dplyr::select(-days_count, -num_sessions_user_in_day)
  #dplyr::select(user, days_count, session_id, num_sessions_this_day, avg_num_sessions)

#Average Exercise Accuracy by User 
user_ex_acc <- duodata |> 
  group_by(user, exercise_id) |> 
  summarize(avg_accuracy_by_exercise = mean(label), 
            .groups = 'keep') |>
  ungroup() |> 
  dplyr::select(-exercise_id) |>
  group_by(user) |> 
  summarize(avg_exercise_accuracy = mean(avg_accuracy_by_exercise), 
            .groups = 'keep') |> 
  ungroup()

duodata <- left_join(duodata, user_ex_acc, 
                     by = join_by(user))

rm(user_ex_acc)

#Average Overall Session Accuracy
user_sess_acc <- duodata |> 
  group_by(user, session_id) |> 
  summarize(avg_accuracy_by_session = mean(label), 
            .groups = 'keep') |>
  ungroup() |> 
  dplyr::select(-session_id) |>
  group_by(user) |> 
  summarize(avg_session_accuracy = mean(avg_accuracy_by_session), 
            .groups = 'keep') |> 
  ungroup()

duodata <- left_join(duodata, user_sess_acc, 
                     by = join_by(user))

rm(user_sess_acc)

  
#Average Session Accuracy by Type
  #Average Test Accuracy
user_test_acc <- duodata |> 
  filter(session == 'test') |> 
  group_by(user) |> 
  summarize(avg_test_accuracy = mean(label), 
            .groups = 'keep') |> 
  ungroup()

duodata <- left_join(duodata, user_test_acc, 
          by = join_by(user)) 

# |> 
#   mutate(avg_test_accuracy = if_else(is.na(avg_test_accuracy, 
#                                            0, 
#                                            avg_test_accuracy)))

rm(user_test_acc)

  #Average Lesson Accuracy
user_lesson_acc <- duodata |> 
  filter(session == 'lesson') |> 
  group_by(user) |> 
  summarize(avg_lesson_accuracy = mean(label), 
            .groups = 'keep') |> 
  ungroup()

duodata <- left_join(duodata, user_lesson_acc, 
          by = join_by(user)) 

# |> 
#   mutate(avg_lesson_accuracy = if_else(is.na(avg_lesson_accuracy, 
#                                              0, 
#                                              avg_lesson_accuracy)))

rm(user_lesson_acc)

  #Average Practice Accuracy
user_practice_acc <- duodata |> 
  filter(session == 'practice') |> 
  group_by(user) |> 
  summarize(avg_practice_accuracy = mean(label), 
            .groups = 'keep') |> 
  ungroup()

duodata <- left_join(duodata, user_practice_acc, 
          by = join_by(user)) 

# |> 
#   mutate(avg_practice_accuracy = if_else(is.na(avg_practice_accuracy, 
#                                                0, 
#                                                avg_practice_accuracy)))

rm(user_practice_acc)

#Average Accuracy per User by Format
  #Reverse_Translate
user_rever_t_acc <- duodata |> 
  filter(format == 'reverse_translate') |> 
  group_by(user) |> 
  summarize(avg_reverse_trans_accuracy = mean(label), 
            .groups = 'keep') |> 
  ungroup()
  
duodata <- left_join(duodata, user_rever_t_acc, 
          by = join_by(user)) 

rm(user_rever_t_acc)

  #Reverse_Tap
user_rever_tap_acc <- duodata |> 
  filter(format == 'reverse_tap') |> 
  group_by(user) |> 
  summarize(avg_reverse_tap_accuracy = mean(label), 
            .groups = 'keep') |> 
  ungroup()

duodata <- left_join(duodata, user_rever_tap_acc, 
          by = join_by(user)) 
# |> 
#   mutate(avg_reverse_tap_accuracy = if_else(is.na(avg_reverse_tap_accuracy, 
#                                                     0, 
#                                                     avg_reverse_tap_accuracy)))

rm(user_rever_tap_acc)

  #Listen
user_listen_acc <- duodata |> 
  filter(format == 'listen') |> 
  group_by(user) |> 
  summarize(avg_listen_accuracy = mean(label), 
            .groups = 'keep') |> 
  ungroup()
  
duodata <- left_join(duodata, user_listen_acc, 
                     by = join_by(user)) 
# |> 
#   mutate(avg_listen_accuracy = if_else(is.na(avg_listen_accuracy, 
#                                        0, 
#                                        avg_listen_accuracy)))

rm(user_listen_acc)
  


#TOTALS


#Total Number of of Countries by User 
duodata <- duodata |> 
  group_by(user) |> 
  mutate(country_count = str_count(countries, ",") + 1) |> 
  ungroup() 
  #dplyr::select(countries, country_count) |> #arrange(desc(country_count)) 


#Total Time Spent on App by User
user_times <- duodata |> 
  group_by(user, exercise_id) |> 
  summarize(total_time_exer = sum(time), 
            .groups = 'keep') |> 
  ungroup() |> 
  group_by(user) |> 
  summarise(total_time = mean(total_time_exer), 
            .groups = 'keep')

duodata <- left_join(duodata, user_times, by = join_by(user))
rm(user_times)


#Total Number of Exercises per User
tot_exer <- duodata |> 
  group_by(user) |> 
  summarize(total_exercises = n_distinct(exercise_id)) |> 
  ungroup()

duodata <- left_join(duodata, tot_exer, by = join_by(user))
rm(tot_exer)


#Total Number of Sessions per User
tot_sess <-  duodata |> 
  group_by(user) |> 
  summarize(total_sessions = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, tot_sess, by = join_by(user))
rm(tot_sess)


#Total Number of Session by Type per User
  #Test
n_test <- duodata |> 
  filter(session == 'test') |> 
  group_by(user) |>
  summarize(total_test_sessions = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, n_test, by = join_by(user))
rm(n_test)

#Practice
n_practice <- duodata |> 
  filter(session == 'practice') |> 
  group_by(user) |>
  summarize(total_practice_sessions = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, n_practice, by = join_by(user))
rm(n_practice)

#Lesson
n_lesson <- duodata |> 
  filter(session == 'lesson') |> 
  group_by(user) |>
  summarize(total_lesson_sessions = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, n_lesson, by = join_by(user))
rm(n_lesson)


#Total Number of Each Format per User
  #Reverse Translate
n_rever_t <- duodata |> 
  filter(format == 'reverse_translate') |> 
  group_by(user) |>
  summarize(total_reverse_translate = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, n_rever_t, by = join_by(user))
rm(n_rever_t)

  #Reverse_tap
n_rever_tap <- duodata |> 
  filter(format == 'reverse_tap') |> 
  group_by(user) |>
  summarize(total_reverse_tap = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, n_rever_tap, by = join_by(user))
rm(n_rever_tap)

  #Listen
n_listen <- duodata |> 
  filter(format == 'listen') |> 
  group_by(user) |>
  summarize(total_listen = n_distinct(session_id)) |> 
  ungroup()

duodata <- left_join(duodata, n_listen, by = join_by(user))
rm(n_listen)

  
#OTHER

#Get Number of Days Skipped by User
skipped <- duodata |>
  mutate(days_round_down = floor(days)) |> 
  group_by(user, days_round_down) |> 
  summarise(.groups = 'keep') |>
  ungroup() |> 
  mutate(days_skipped_user = days_round_down - dplyr::lag(days_round_down) - 1) |> 
  ungroup() |> 
  mutate(days_skipped_user = if_else(is.na(days_skipped_user) | days_skipped_user < 0, 
                                     0, 
                                     days_skipped_user))

duodata <- left_join(duodata |> mutate(days_round_down = floor(days)), 
          skipped, 
          by = join_by(user, days_round_down)) |> 
  dplyr::select(-days_round_down) 

rm(skipped)

#Get Last Day User Used App
duodata <- duodata |> 
  group_by(user) |> 
  mutate(drop_day = max(floor(days))) |> 
  ungroup()

#Accuracy on their last day
duodata <- duodata |> 
  filter(floor(days) == drop_day) |>
  group_by(user) |> 
  mutate(last_day_accuracy = mean(label)) |> 
  ungroup()
```

# Variable Creation

```{r restructure-data}
#Removing Variables not included in our final analysis 
duodata <- duodata |> dplyr::select(-countries)

#Should we remove variables related to tokens-level info? Michael wasn't sure
#IF WE ARE, CODE BELOW SHOULD DO IT
duodata <- duodata |> dplyr::select(-token,
                                    -part_of_speech,
                                    -dependency_label,
                                    -dependency_edge_head,
                                    -token_index,
                                    -instance_id,
                                    -exercise_id, 
                                    -days, 
                                    -exercise_index, 
                                    -client, 
                                    -session, 
                                    -format, 
                                    -time, 
                                    -session_id,
                                    -label)


#Check New Unit of Analysis (should be 2585 rows)
distinct(duodata)

#Removing Duplicated Rows (each row is still based on the tokens, so there are duplicates)
duodata <- distinct(duodata)

#Find duplicated columns
duplicated_columns <- duplicated(as.list(duodata))

#Show the names of duplicated columns
colnames(duodata[duplicated_columns])

#Remove the duplicated columns
duodata <- duodata[, !duplicated_columns]
```

```{r convert-na-to-0}
duodata <- duodata %>% mutate(across(-user, ~if_else(is.na(.), 0, .)))
```

```{r view-data}
glimpse(duodata)
```
